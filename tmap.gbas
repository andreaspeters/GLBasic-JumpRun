// --------------------------------- //
// Project: Jump 'n Run
// Start: Tuesday, May 12, 2015
// IDE Version: 12.312


TYPE TMap
	datas[]
	width; height
	tileSet$
	tileSize
	tileWidth
	tileHeight
	fhTileSet
	fhMap
	collision[]	AS TMapCollision
	scrollX
	scrollY

	FUNCTION init: mapName$
		self.fhTileSet = GENSPRITE()
		self.fhMap = GENFILE()

		// Das Scrollen initialisieren
		self.scrollX = 0
		self.scrollY = 0


		// Map Datei oeffnen und einlesen
		LOCAL line$
		IF OPENFILE(self.fhMap, mapName$, 1) = FALSE THEN END

		// Einlesen der Map im flare format
		LOCAL x, y
		y = 0
		WHILE ENDOFFILE(self.fhMap)	<> 1
			READLINE self.fhMap, line$

			SELECT line$
				// Einlesen des Header Bereiches
				CASE "[header]"
					self.width = INTEGER(getValue$())
					self.height = INTEGER(getValue$())
					self.tileWidth = INTEGER(getValue$())
					self.tileHeight = INTEGER(getValue$())
				// Einlesen der Tileset Bild Informationen
				CASE "[tilesets]"
					LOCAL tmp$[]
					SPLITSTR(getValue$(), tmp$[], ",")
					self.tileSet$ = tmp$[0]
					self.tileSize = tmp$[1]
				// Einlesen der Map an sich
				CASE "[layer]"
					LOCAL res$
					LOCAL tiles$[]
					DIM self.datas[self.width+1][self.height+1]
					res$ = getValue$()	// das ist der layer typ. dieser wird im moment nicht benoetigt
					res$ = getValue$()	// dies ist der leer bereich fuer des data attribute "data="
					// hier kommt die map
					FOR y=0 TO self.height - 1 STEP 1
						SPLITSTR(getValue$(), tiles$[], ",")
						FOR x=0 TO self.width - 1 STEP 1
							self.datas[x][y] = INTEGER(tiles$[x])
						NEXT
					NEXT
				// Einlesen der Kollisionsobjekte
				CASE "[Objektebene]"
					LOCAL objType = INTEGER(getValue$())
					setCollValue(getValue$(), objType)
				DEFAULT
			ENDSELECT
		WEND

		// Laden des TileSet
		LOADANIM self.tileSet$, self.fhTileSet, self.tileSize, self.tileSize
	ENDFUNCTION

	FUNCTION update:
	ENDFUNCTION

	// Funktion: render
	// Rendert die grafischen Elemente der Map
	FUNCTION render:
		FOR x = 0 TO self.width - 1
			FOR y = 0 TO self.height - 1
				SELECT self.datas[x][y]
					CASE 0
					DEFAULT
						SETSPRITEANIM self.fhTileSet, self.tileSize, self.tileSize
						ROTOZOOMANIM self.fhTileSet, self.datas[x][y]-1, (x+self.scrollX)*self.tileSize, (y+self.scrollY)*self.tileSize, 0, 1.05
				ENDSELECT
			NEXT
		NEXT
	ENDFUNCTION

	// Funktion: getValue$
	// Gibt zu einem Attribute aus der Map Datei im Format "Attr=Val" das Value wieder
	FUNCTION getValue$:
		LOCAL res$[]
		LOCAL line$
		READLINE self.fhMap, line$
		SPLITSTR(line$, res$[], "=")

		// Wenn kein Value vorhanden ist, kann dieser auch nicht ausgegeben werden
		IF LEN(res$[]) > 1
			RETURN res$[1]
		ELSE
			RETURN line$
		ENDIF
	ENDFUNCTION

	// Funktion: setCollValue
	// Parameter: location als array mit 4 elementen
	// Diese Funktion speicher in einem Array alle Kollisionsobjekte
	FUNCTION setCollValue: location$, objType
		LOCAL laenge = LEN(self.collision[])
		LOCAL loc$[]
		INC laenge

		REDIM self.collision[laenge]

		SPLITSTR(location$, loc$[], ",")

		self.collision[laenge-1].x = INTEGER(loc$[0])
		self.collision[laenge-1].y = INTEGER(loc$[1])
		self.collision[laenge-1].width = INTEGER(loc$[2]) + 1
		self.collision[laenge-1].height = INTEGER(loc$[3]) + 1
		self.collision[laenge-1].colType = objType

	ENDFUNCTION

	// Funktion: checkCollision
	// Prueft auf Kollision
	// X, Y Position des Objektes welches geprueft werden soll
	// objType ist der Type des Map Objektes
	//		1 = Ein Hinderniss oder Untergrund
	//		2 = Ein durchdringbares Hindernis welches aber auch ein Untergrund hat
	// Return: true
	FUNCTION checkCollision: x, y, objType
		LOCAL count = LEN(self.collision)
		LOCAL i
		FOR i=0 TO count-1
			IF x >= self.collision[i].x+self.scrollX AND x <= self.collision[i].width+self.collision[i].x+self.scrollX				
				IF y >= self.collision[i].y+self.scrollY AND y <= self.collision[i].height+self.collision[i].y+self.scrollY					
					IF 	self.collision[i].colType = objType
						RETURN TRUE 
					ENDIF
				ENDIF
			ENDIF
		NEXT
		RETURN FALSE
	ENDFUNCTION

	// Funktion: getTileSize
	// Gibt die Groesse des eingelesenen Tiles aus
	// Return: TileSize als Integer
	FUNCTION getTileSize:
		RETURN self.tileSize
	ENDFUNCTION

	// Funktion: setScrollX
	// Setzt die Position der Map
	FUNCTION setScrollX: x
		self.scrollX = self.scrollX + x
	ENDFUNCTION

	// Funktion: setScrollY
	// Setzt die Position der Map
	FUNCTION setScrollY: y
		self.scrollY = self.scrollY + y
	ENDFUNCTION

ENDTYPE


