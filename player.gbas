// --------------------------------- //
// Project: Jump 'n Run
// Start: Tuesday, May 12, 2015
// IDE Version: 12.312

TYPE tplayer
	x; y
	vx; vy
	livePoints
	playerSize = 72
	playerSet$ = "p1_spritesheet.png"
	speed = 1
	fhPlayerSet
	jump = TRUE // Springen erlauben
	collision = FALSE // liegt eine kollision vor?
	gravity = FALSE // Gravity erlauben?
	scroll = FALSE // es wird gescrollt
	anim = 0 // Das Sprite der Player Figur
	score AS TScore // Die Punkte des Spielers	
	move = 1

	FUNCTION init: x, y
		self.x = x
		self.y = y

		self.vx = 0
		self.vy = 0

		self.fhPlayerSet = GENSPRITE()
		LOADANIM self.playerSet$, self.fhPlayerSet, self.playerSize, self.playerSize
	ENDFUNCTION

	FUNCTION update:
		LOCAL oldX = self.x
		LOCAL oldY = self.y
		
		LOCAL collision = FALSE
		
		// Bewegung
		IF KEY(203) AND self.scroll = FALSE
			DEC self.vx, self.speed+1 //nach links bewegen
			self.move = 1.5
		ENDIF
			
		IF KEY(205) AND self.scroll = FALSE
			INC self.vx, self.speed+1 //nach rechts bewegen
			self.move = 0.8
		ENDIF

		// Animationsbewegung des Players nach Rechts oder links
		IF (KEY(205) OR KEY(203)) AND self.anim < 4
			INC self.anim, 0.5
		ELSE
			self.anim = 0
		ENDIF

		// Traegheit
		self.vx = self.vx * 0.75

		// Ein Coin Kästchen wurde angesprungen
		LOCAL res = map.checkCollision(getPositionX(), getPositionY(), 2)
		IF res <> -1
			INC self.score.score, 1
			map.collision[res].active = FALSE
			self.jump = FALSE
			collision = FALSE
		ENDIF

		// Nach oben oder unten klettern wenn player vor einem Kletter Objekt steht
		IF map.checkCollision(getPositionX(), getPositionY(), 3) <> -1
			self.anim = 12
			// Hochklettern
			IF KEY(200)
				self.vy = 0
				DEC self.y, self.speed + 2
			ENDIF

			// Runterklettern
			IF KEY(208)
				self.vy = 0
				INC self.y, self.speed + 2
			ENDIF

			collision = TRUE
		ENDIF
		
		// Sprung Brett
		IF map.checkCollision(getPositionX(), getPositionY(), 4) <> -1
			self.anim = 12
		ENDIF		

		// Nur huepfen, wenn Kontakt zum Boden herscht.
		IF KEY(57) AND self.jump = TRUE
			self.vy = -13
			self.jump = FALSE
			collision = FALSE
		ENDIF

		// Pruefen auf Y Kollision
		INC self.y, self.vy
		IF map.checkCollision(getPositionX(), getPositionY(), 1) <> -1
			self.y = oldY
			collision = TRUE
			self.jump = TRUE
		ENDIF

		// Pruefen auf X Kollision nach rechts und nach links
		INC self.x, self.vx		
		IF map.checkCollision(getPositionX(), getPositionY(), 1) <> -1
			collision = TRUE
			self.jump = TRUE
			self.x = oldX
		ENDIF

		// Schwerkraft wenn keine Kollision vorherscht
		IF collision = FALSE
			self.anim = 6
			INC self.vy, 0.5
		ENDIF


		// Scrollen der Map (aber nur in X Richtung)
		LOCAL sx, sy
		GETSCREENSIZE sx, sy	

		// Rechts Bewegung nach Links Scrollen, in der Mitte der Seite aber nur wenn die 
		// taste nach rechts gedrueckt wird und keine X Collision besteht.
		IF getPositionX() >= (sx / map.tileSize - map.scrollX - (sx / map.tileSize/2)) AND KEY(205) AND map.checkCollision(getPositionX(), getPositionY(), 1) =  -1
			map.setScrollX(-0.1)
			self.scroll = TRUE
		ELSE
			self.scroll = FALSE
		ENDIF

		// Links Bewegung nach Rechts Scrollen, in der linken hälfte der Seite
//		IF getPositionX() <= (sx / map.tileSize / 2) AND KEY(203)
//			map.setScrollX(0.1)
//			self.scroll = TRUE
//		ELSE
//			self.scroll = FALSE			
//		ENDIF

	ENDFUNCTION

	FUNCTION render:
		SETSPRITEANIM self.fhPlayerSet, 73, 95
		ROTOZOOMANIM self.fhPlayerSet, self.anim, self.x - map.scrollX, self.y - 15, 0, 1.05
	ENDFUNCTION

	// Funktion: getPositionX
	// Gibt die Position X auf der Map aus
	// Return: X Position
	FUNCTION getPositionX:
		RETURN INTEGER(self.x / map.tileSize + 1 - map.scrollX)
	ENDFUNCTION

	// Funktion: getPositionY
	// Gibt die Position Y auf der Map aus
	// Return: Y Position
	FUNCTION getPositionY:
		RETURN INTEGER(self.y / map.tileSize + 1 - map.scrollY)
	ENDFUNCTION


ENDTYPE





